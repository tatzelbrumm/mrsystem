diff -Nru a/s88udp-bpi.c b/s88udp-bpi.c
--- a/s88udp-bpi.c	2017-08-24 21:54:49.000000000 +0200
+++ b/s88udp-bpi.c	2019-06-20 21:45:56.000000000 +0200
@@ -29,6 +29,12 @@
 #include <linux/can.h>
 #include "s88udp-bpi.h"
 
+#ifdef USE_MRSYSTEM
+#include <mr_ipc.h>
+#include <mr_cs2ms2.h>
+#include <cs2.h>
+#endif
+
 #define BIT(x)		(1<<x)
 #define MICRODELAY	15		/* clock frequency 1/MICRODELAY[us] */
 #define MINDELAY	2		/* min delay in usec */
@@ -116,6 +122,24 @@
     printf("\n");
 }
 
+#ifdef USE_MRSYSTEM
+int sendipc(int socket, unsigned char *netframe)
+{  MrIpcCmdType Cmd;
+   MrCs2CanDataType CanMsg;
+
+   MrEthCs2Decode(&CanMsg, (char *)netframe);
+   MrIpcInit(&Cmd);
+   MrIpcEncodeFromCan(&Cmd, &CanMsg);
+   MrIpcSetSenderSocket(&Cmd, socket);
+   MrIpcSetReceiverSocket(&Cmd, MR_IPC_SOCKET_ALL);
+   if (MrIpcGetCanHash(&Cmd) == 0)
+      MrIpcSetCanHash(&Cmd, Cs2CalcHash(MrIpcGetCanHash(&Cmd)));
+   MrIpcSend(socket, &Cmd);
+   MrIpcExit(&Cmd);
+   return(13);
+}
+#endif
+
 int create_event(struct s88_t *s88, int bus, int offset, uint32_t changed_bits, uint32_t value) {
     int s;
     uint32_t i, mask, canid, temp32;
@@ -123,7 +147,7 @@
     uint8_t netframe[13];
 
     /* allow usefull M*rklin hashes only */
-    canid = 0x00230300 | (s88->hash & 0x0000ffff);
+    canid = 0x00220300 | (s88->hash & 0x0000ffff);
 
     temp32 = htonl(canid);
     memcpy(netframe, &temp32, 4);
@@ -148,7 +172,11 @@
 		netframe[9] = 1;
 		netframe[10] = 0;
 	    }
+#ifdef USE_MRSYSTEM
+	    s = sendipc(s88->socket, netframe);
+#else
 	    s = sendto(s88->socket, netframe, 13, 0, (struct sockaddr *)&s88->baddr, sizeof(s88->baddr));
+#endif
 	    if (s != 13) {
 		fprintf(stderr, "%s: error sending UDP data: %s\n", __func__, strerror(errno));
 		return -1;
@@ -336,14 +364,20 @@
     if (!s88_data.background && s88_data.verbose)
 	printf("using broadcast address %s\n", udp_dst_address);
     /* open udp socket */
+#ifdef USE_MRSYSTEM
+    if ((s88_data.socket = MrIpcConnectIf("lo0", 10234)) < 0) {
+#else
     if ((s88_data.socket = socket(AF_INET, SOCK_DGRAM, 0)) < 0) {
-	fprintf(stderr, "UDP socket error: %s\n", strerror(errno));
+#endif
+    	fprintf(stderr, "UDP socket error: %s\n", strerror(errno));
 	exit(EXIT_FAILURE);
     }
+#ifndef USE_MRSYSTEM
     if (setsockopt(s88_data.socket, SOL_SOCKET, SO_BROADCAST, &on, sizeof(on)) < 0) {
 	fprintf(stderr, "UDP set broadcast option error: %s\n", strerror(errno));
 	exit(EXIT_FAILURE);
     }
+#endif
 
     if (destination_second_port) {
 	/* open second udp socket if requested */
diff -Nru a/s88udp-bpi.h b/s88udp-bpi.h
--- a/s88udp-bpi.h	2017-08-24 21:54:49.000000000 +0200
+++ b/s88udp-bpi.h	2019-06-20 23:37:04.000000000 +0200
@@ -16,13 +16,26 @@
 
 #include "allwinner.h"
 
+/* BPi */
 #define BPI_PH5		(7*32+5)
 #define BPI_PI21	(8*32+21)
 #define BPI_PH3		(7*32+3)
 #define BPI_PI20	(8*32+20)
+/* BPi Pro */
+#define BPI_PB5		(1*32+5)
+#define BPI_PB6		(1*32+6)
+#define BPI_PB8		(1*32+8)
+#define BPI_PB12	(1*32+12)
 
+#ifdef BPI_PRO
+#define DATA_PIN	BPI_PB12
+#define CLOCK_PIN	BPI_PB8
+#define LOAD_PIN	BPI_PB5
+#define RESET_PIN	BPI_PB6
+#else
 #define DATA_PIN	BPI_PI20
 #define CLOCK_PIN	BPI_PH3
 #define LOAD_PIN	BPI_PI21
 #define RESET_PIN	BPI_PH5
+#endif
 
