#! /bin/sh
### BEGIN INIT INFO
# Provides:          maecanserver
# Required-Start:    $network $mrsystem
# Required-Stop:     $network $mrsystem
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start can interface
# Description:       This file starts the maecanserver
### END INIT INFO

# Author: Michael Bernstein <Michael_Bernstein@mbernstein.de>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin
DESC="Start maecan server"
NAME=maecanserver
SCRIPTNAME=/etc/init.d/$NAME
DAEMONPATH=/var/www/MaeCAN-Server/node
SERVICE=maecanserver.js
PIDFILE="/var/run/maecanserver.pid"
ENABLED=1

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Exit if explicitly told to
[ "$ENABLED" != "0" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	cd $DAEMONPATH ; forever --pidFile $PIDFILE start $SERVICE 2>&1 > /dev/null &
	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	if [ -f $PIDFILE ]; then
		echo "Shutting down $NAME"
		# stop the process.
		killall node
		# Get rid of the pidfile, since Forever won't do that.
		rm -f $PIDFILE
		RETVAL=$?
	else
		echo "$NAME is not running."
		RETVAL=0
	fi
	return $RETVAL
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	ip -s -d link show can0 && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	[ "$VERBOSE" != no ] && log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
			1) [ "$VERBOSE" != no ] && log_end_msg 1 ;; # Old process is still running
			*) [ "$VERBOSE" != no ] && log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		[ "$VERBOSE" != no ] && log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

